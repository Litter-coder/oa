<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:ctx="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<beans:import resource="applicationContext.xml" />

	<http use-expressions="true" access-denied-page="/access-denied.jsp" entry-point-ref="authenticationProcessingFilterEntryPoint">
		<!-- filters="none"表示放行 -->
		<intercept-url pattern="/css/**" filters="none" />
		<intercept-url pattern="/fonts/**" filters="none" />
		<intercept-url pattern="/images/**" filters="none" />
		<intercept-url pattern="/js/**" filters="none" />
		<intercept-url pattern="/dwz/**" filters="none" />
		<intercept-url pattern="/dwz_local/**" filters="none" />
		<intercept-url pattern="/login.jsp" filters="none" />
		<intercept-url pattern="/index.jsp" filters="none" />
		<intercept-url pattern="/error.jsp" filters="none" />
		<intercept-url pattern="/access-denied.jsp" filters="none" />
		<intercept-url pattern="/login/**" filters="none" />
		<!-- 登录用户有权限访问 -->
<!-- 		<intercept-url pattern="/**" access="isAuthenticated()" /> -->
				
		<!-- 覆盖原有的登录验证类 实现对验证码验证 -->
		<custom-filter
			ref="randomTokenValidateCodeUsernamePasswordAuthenticationFilter"
			position="FORM_LOGIN_FILTER" />
		<logout logout-url="/logout" logout-success-url="/login.jsp" invalidate-session="true"/>
		
		<session-management invalid-session-url="/login/sessionTimeout.do" />
		
		<remember-me />
		<anonymous />
		
		<!-- 加载系统权限 : 放在FILTER_SECURITY_INTERCEPTOR过滤器 之后 ,先会验证上面配置的access-->
		<custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- Session失效过滤器 拦截失效的Session -->
		<custom-filter ref="concurrentSessionFilter" position="CONCURRENT_SESSION_FILTER" />
		
	</http>

	<!-- 安全拦截器 : FilterSecurityIntercepto，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->

	<beans:bean id="filterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">

		<beans:property name="authenticationManager" ref="authenticationManager" />        <!-- 认证管理 即 登录验证 -->

		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />        <!-- 访问决策管理 即 验证用户是否有权限访问数据库配置的URL -->

		<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />    <!-- 权限资源加载管理 即 加载数据库配置的URL和Token -->

		<beans:property name="observeOncePerRequest" value="false" />

	</beans:bean>

	<!-- 决策管理 : 自定义验证用户是否有权限访问受保护的URL 暂未使用，使用时将上面登录有权限使用注释打开，并且filterSecurityInterceptor中的决策管理对象引用此对象-->
	<beans:bean id="myAccessDecisionManager" class="com.hongan.oa.security.access.MyAccessDecisionManager"/>
	
	<!-- security 自带的投票决策管理,超过半数才会允许访问 -->
	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.ConsensusBased">
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:ref bean="authenticationVoter"/>
				<beans:ref bean="publicAccessVoter"/>
				<beans:ref bean="roleVoter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- 定义投票器 -->
	<beans:bean name="authenticationVoter" class="com.hongan.oa.security.access.voter.AuthenticationVoter"/>
	<beans:bean name="publicAccessVoter" class="com.hongan.oa.security.access.voter.PublicAccessVoter">
		<beans:constructor-arg name="urlMatcher">
			<beans:ref bean="urlMatcher"/>
		</beans:constructor-arg>
		<beans:constructor-arg name="publicAccessUrls"><!-- 这种链接只有登录后才可访问，而且不会写到菜单表中又不会不经过fiter，所以用投票决策 -->
			<beans:list>
				<beans:value>/**/*.jsp</beans:value>
				<beans:value>/index/*</beans:value>
				<beans:value>/dwz.frag.xml**</beans:value>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	<beans:bean name="roleVoter" class="com.hongan.oa.security.access.voter.RoleVoter"/>
	
	<beans:bean id="urlMatcher" class="org.springframework.security.web.util.AntUrlPathMatcher"/>
	
	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 加载系统所有的权限 （需要用户重写） -->
	<beans:bean id="mySecurityMetadataSource" init-method="loadMenuSource"
		class="com.hongan.oa.security.access.MyInvocationSecurityMetadataSource">
		<beans:property name="urlMatcher" ref="urlMatcher"/>
	</beans:bean>

	<!-- 验证配置: ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 查询用户 -->

	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="loginAuthenticationProvider" />
	</authentication-manager>

	<!-- 认证用户: 为了注入加密盐 -->

	<beans:bean id="loginAuthenticationProvider"
		class="com.hongan.oa.security.authentication.LoginAuthenticationProvider">

		<beans:property name="userDetailsService" ref="userDetailsService" /> <!-- 主要实现UserDetailsService接口即可，查询用户和权限 -->

		<beans:property name="passwordEncoder" ref="passwordEncoder" />      <!-- 密码加密方式 -->

		<beans:property name="saltSource" ref="saltSource" />                <!-- 注入加密盐 -->

	</beans:bean>

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">

		<beans:property name="encodeHashAsBase64" value="false" />

	</beans:bean>

	<!-- 通过动态的加密盐进行加密，该配置通过用户名提供加密盐, 通过UserDetails的getUsername()方式 -->

	<beans:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">

		<beans:property name="userPropertyToUse" value="getUsername" />

	</beans:bean>

	<!-- 为了加入验证码验证方法 重写登陆验证配置 说明一下：在1.0版本中在验证用户名和密码之前提供有 验证码验证的方法，但2.0版本后就没了 
		要配置自己的登录方法，就要先 注入下面的类 -->

	<!-- <http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint"> 
		中注入 认证的入口，是一个实现 AuthenticationEntryPoint接口的类。为ExceptionTranslationFilter类提供认证依据。 -->

	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.AuthenticationProcessingFilterEntryPoint">
		<beans:property name="loginFormUrl" value="/login.jsp"></beans:property>
	</beans:bean>

	<!-- 配置自己的登录验证方法 start -->

	<beans:bean
		id="randomTokenValidateCodeUsernamePasswordAuthenticationFilter"
		class="com.hongan.oa.security.authentication.RandomTokenValidateCodeUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check" />   <!-- 登录拦截URL -->

		<beans:property name="authenticationSuccessHandler"
			ref="loginLogAuthenticationSuccessHandler" />    <!-- 登录成功处理 -->

		<beans:property name="authenticationFailureHandler"
			ref="simpleUrlAuthenticationFailureHandler" />   <!-- 登录失败处理 -->

		<beans:property name="authenticationManager" ref="authenticationManager" />

		<!-- 注入用户登录个数限制 -->

		<beans:property name="sessionAuthenticationStrategy"
			ref="concurrentSessionControlStrategy" />

	</beans:bean>

	<beans:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">

		<beans:property name="defaultTargetUrl" value="/index/loadMenu.do" />    <!-- 登录成功跳转URL -->

	</beans:bean>

	<beans:bean id="simpleUrlAuthenticationFailureHandler"

		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">

		<beans:property name="defaultFailureUrl" value="/login.jsp?error=true" /><!-- 登录失败跳转URL -->

	</beans:bean>

	<!-- 配置自己的登录验证方法 end -->



	<!-- 限制用户登录个数 -->

	<beans:bean id="concurrentSessionControlStrategy"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">

		<beans:constructor-arg ref="sessionRegistry" />

		<beans:property name="exceptionIfMaximumExceeded"
			value="false" /> <!-- "true" 超出的登录个数被阻止 false 剔除前面的登录 -->

		<beans:property name="maximumSessions" value="1" /> <!-- 同一个用户允许登录的个数 -->

	</beans:bean>



	<!-- spring session注册器 用来存储用户的Session -->

	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />



	<!-- JDBC认证方式 自己写必须实现Acegi提供的UserDetailsService接口类 -->

	<beans:bean id="userDetailsService"
		class="com.hongan.oa.security.authentication.UserDetailsServiceImpl" />



	<!-- Session过期拦截器 主要针对 用户登录提出前一个登录用户得分过滤器 -->

	<beans:bean id="concurrentSessionFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">

		<beans:property name="sessionRegistry" ref="sessionRegistry" />

		<beans:property name="expiredUrl" value="/login/sessionTimeout.do" />   <!-- Session过期跳转URL -->

	</beans:bean>

	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		p:basename="classpath:spring_security_messages_zh_CN" />

</beans:beans>